#!/usr/bin/perl

use strict;
use warnings;

use Data::Dumper;
use Test::Harness;

if (defined $ARGV[0] and $ARGV[0] =~ /^\d+$/ || $ARGV[0] eq "-v") {
    $Test::Harness::verbose = shift;
}

my $formatter;

if (@ARGV && $ARGV[0] =~ /^--formatter=/) {
    (undef, $formatter) = split(/=/, shift, 2);
    $formatter = "TAP::Formatter::$formatter" unless $formatter =~ /::/;
}
unshift(@INC, "blib/lib", "blib/arch");

my @tests;
if (defined $ENV{'TEST_FILES'}) {
    for my $file (@{$ENV{'TEST_FILES'}}) {
        if (-d $file) {
            push(@tests, <$file/*.t>);
        }
        else {
            if (/\*/) {
                my @files = glob($_);
                push(@tests, @files);
            }
            else {
                $_ .= ".t" unless /\.t$/;
                push(@tests, $_);
            }
        }
    }
}
else {
    @tests = (<t/*.t>);
}

if ($formatter) {
    use File::Path;
    File::Path::rmtree("tap");

    $ENV{PERL_TEST_HARNESS_DUMP_TAP} = "tap";

    require TAP::Harness;

    my $harness = TAP::Harness->new(
        {
            formatter_class => $formatter,
            merge           => 1,
            timer           => 1,
            lib             => \@INC,
            exec            => ['/usr/bin/perl', '-MDevel::Cover=-silent,1']
        }
    );

    my $result = $harness->runtests(@tests);

    my $return_code = $result->{'exit'};

# make sure we return with the exit code of the tests so if we fail we bubble it up
    exit($return_code);

}
else {
    runtests @tests;
}
